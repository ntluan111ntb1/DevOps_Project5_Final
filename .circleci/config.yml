version: 2.1
executors:
  node:
    docker:
      - image: circleci/node:13.8.0
  python:
    docker:
      - image: python:3.11-rc-alpine

orbs:
  aws-eks: circleci/aws-eks@2.2.0
  kubernetes: circleci/kubernetes@1.3

jobs:
  install-and-check-dockerfile:
    docker:
      - image: python:3.7.3-stretch
    working_directory: ~/repository
    steps:
      - checkout
      - run:
          name: install hadolint to check dockerfile
          command: |
            python3 -m venv venv
            . venv/bin/activate
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
            chmod +x /bin/hadolint
      - run:
          name: run hadolint to check dockerfile
          command: |
            . venv/bin/activate
            make lint

  build-image-java:
    docker:
      - image: docker:20.10.7-git
    working_directory: ~/devops-project-05
    steps:
      - setup_remote_docker:
          version: 20.10.7
      - checkout
      - run:
          name: login docker hub
          command: |
            echo $DOCKER_PASSWORD | docker login -u 0399468055 --password-stdin
      - run:
          name: build image java
          command: |
            docker build -t devops_project5 .
            docker tag devops_project5 0399468055/devops_project5:latest
      - run:
          name: push image to docker hub
          command: |
            docker push 0399468055/devops_project5:latest
            
  create-cluster:
    executor: node
    working_directory: ~/devops-project-05
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["67:95:11:c5:2b:d7:16:26:e6:e0:4a:7f:eb:1d:8b:bd"]
      - run:
          name: install dependence and cli
          command: |
            sudo apt-get update && sudo apt-get install -yy less
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: install eksctl
          command: |
            ARCH=amd64
            PLATFORM=$(uname -s)_$ARCH
            curl -sLO "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$PLATFORM.tar.gz"
            curl -sL "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_checksums.txt" | grep $PLATFORM | sha256sum --check
            tar -xzf eksctl_$PLATFORM.tar.gz -C /tmp && rm eksctl_$PLATFORM.tar.gz
            sudo mv /tmp/eksctl /usr/local/bin
      - run:
          name: install kubectl
          command: |
            curl -O https://s3.us-west-2.amazonaws.com/amazon-eks/1.26.2/2023-03-17/bin/linux/amd64/kubectl
            curl -O https://s3.us-west-2.amazonaws.com/amazon-eks/1.26.2/2023-03-17/bin/linux/amd64/kubectl.sha256
            sha256sum -c kubectl.sha256
            openssl sha1 -sha256 kubectl
            chmod +x ./kubectl
            mkdir -p $HOME/bin && cp ./kubectl $HOME/bin/kubectl && export PATH=$PATH:$HOME/bin
            echo 'export PATH=$PATH:$HOME/bin' >> ~/.bashrc
            kubectl version --short --client
      - run:
          name: create AWS profile
          command: |
            aws configure set aws_access_key_id "$AWS_ACCESS_KEY" --profile luannt29 && aws configure set aws_secret_access_key "$AWS_SECRET_ACCESS_KEY" --profile luannt29 && aws configure set region "$AWS_DEFAULT_REGION" --profile luannt29
      - run:
          name: delete exist cluster
          command: |
            chmod +x delete_cluster.sh
            ./delete_cluster.sh
      - run:
          name: wait for 500 seconds to delete cluster
          command: sleep 500
      - run:
          name: create cluster
          command: |
            chmod +x run_kubernetes.sh
            ./run_kubernetes.sh
      - run:
          name: deployment app
          command: |
            aws eks update-kubeconfig --region us-east-1 --name devops_project5 --profile luannt29
            kubectl apply -f deployment.yml
      - run:
          name: attach to elb
          command: |
            kubectl apply -f services.yml
      - run:
          name: get pods and nodes
          command: |
            kubectl get pods --output=wide
            kubectl get nodes --output=wide
      - run:
          name: get elb url
          command: |
            kubectl get services elb

workflows:
  default:
    jobs:
      - install-and-check-dockerfile
      - build-image-java:
          requires:
            - install-and-check-dockerfile
      - create-cluster
          requires:
            - build-image-java
